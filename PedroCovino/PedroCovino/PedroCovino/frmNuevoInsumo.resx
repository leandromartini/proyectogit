<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH/jAAB//wAAf///////////
</value>
  </data>
</root>